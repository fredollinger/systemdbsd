/*
 * Generated by gdbus-codegen 2.40.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __SRC_INTERFACES_TIMEDATED_TIMEDATED_GEN_H__
#define __SRC_INTERFACES_TIMEDATED_TIMEDATED_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.timedate1 */

#define TIMEDATED_TYPE_TIMEDATE1 (timedated_timedate1_get_type ())
#define TIMEDATED_TIMEDATE1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TIMEDATED_TYPE_TIMEDATE1, timedatedTimedate1))
#define TIMEDATED_IS_TIMEDATE1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TIMEDATED_TYPE_TIMEDATE1))
#define TIMEDATED_TIMEDATE1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TIMEDATED_TYPE_TIMEDATE1, timedatedTimedate1Iface))

struct _timedatedTimedate1;
typedef struct _timedatedTimedate1 timedatedTimedate1;
typedef struct _timedatedTimedate1Iface timedatedTimedate1Iface;

struct _timedatedTimedate1Iface
{
  GTypeInterface parent_iface;


  gboolean (*handle_set_local_rtc) (
    timedatedTimedate1 *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_unnamed_arg0,
    gboolean arg_unnamed_arg1,
    gboolean arg_unnamed_arg2);

  gboolean (*handle_set_ntp) (
    timedatedTimedate1 *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_unnamed_arg0,
    gboolean arg_unnamed_arg1);

  gboolean (*handle_set_time) (
    timedatedTimedate1 *object,
    GDBusMethodInvocation *invocation,
    gint64 arg_unnamed_arg0,
    gboolean arg_unnamed_arg1,
    gboolean arg_unnamed_arg2);

  gboolean (*handle_set_timezone) (
    timedatedTimedate1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    gboolean arg_unnamed_arg1);

  gboolean  (*get_can_ntp) (timedatedTimedate1 *object);

  gboolean  (*get_local_rtc) (timedatedTimedate1 *object);

  gboolean  (*get_ntp) (timedatedTimedate1 *object);

  gboolean  (*get_ntpsynchronized) (timedatedTimedate1 *object);

  guint64  (*get_rtctime_usec) (timedatedTimedate1 *object);

  guint64  (*get_time_usec) (timedatedTimedate1 *object);

  const gchar * (*get_timezone) (timedatedTimedate1 *object);

};

GType timedated_timedate1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *timedated_timedate1_interface_info (void);
guint timedated_timedate1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void timedated_timedate1_complete_set_time (
    timedatedTimedate1 *object,
    GDBusMethodInvocation *invocation);

void timedated_timedate1_complete_set_timezone (
    timedatedTimedate1 *object,
    GDBusMethodInvocation *invocation);

void timedated_timedate1_complete_set_local_rtc (
    timedatedTimedate1 *object,
    GDBusMethodInvocation *invocation);

void timedated_timedate1_complete_set_ntp (
    timedatedTimedate1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void timedated_timedate1_call_set_time (
    timedatedTimedate1 *proxy,
    gint64 arg_unnamed_arg0,
    gboolean arg_unnamed_arg1,
    gboolean arg_unnamed_arg2,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean timedated_timedate1_call_set_time_finish (
    timedatedTimedate1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean timedated_timedate1_call_set_time_sync (
    timedatedTimedate1 *proxy,
    gint64 arg_unnamed_arg0,
    gboolean arg_unnamed_arg1,
    gboolean arg_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void timedated_timedate1_call_set_timezone (
    timedatedTimedate1 *proxy,
    const gchar *arg_unnamed_arg0,
    gboolean arg_unnamed_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean timedated_timedate1_call_set_timezone_finish (
    timedatedTimedate1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean timedated_timedate1_call_set_timezone_sync (
    timedatedTimedate1 *proxy,
    const gchar *arg_unnamed_arg0,
    gboolean arg_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void timedated_timedate1_call_set_local_rtc (
    timedatedTimedate1 *proxy,
    gboolean arg_unnamed_arg0,
    gboolean arg_unnamed_arg1,
    gboolean arg_unnamed_arg2,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean timedated_timedate1_call_set_local_rtc_finish (
    timedatedTimedate1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean timedated_timedate1_call_set_local_rtc_sync (
    timedatedTimedate1 *proxy,
    gboolean arg_unnamed_arg0,
    gboolean arg_unnamed_arg1,
    gboolean arg_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void timedated_timedate1_call_set_ntp (
    timedatedTimedate1 *proxy,
    gboolean arg_unnamed_arg0,
    gboolean arg_unnamed_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean timedated_timedate1_call_set_ntp_finish (
    timedatedTimedate1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean timedated_timedate1_call_set_ntp_sync (
    timedatedTimedate1 *proxy,
    gboolean arg_unnamed_arg0,
    gboolean arg_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *timedated_timedate1_get_timezone (timedatedTimedate1 *object);
gchar *timedated_timedate1_dup_timezone (timedatedTimedate1 *object);
void timedated_timedate1_set_timezone (timedatedTimedate1 *object, const gchar *value);

gboolean timedated_timedate1_get_local_rtc (timedatedTimedate1 *object);
void timedated_timedate1_set_local_rtc (timedatedTimedate1 *object, gboolean value);

gboolean timedated_timedate1_get_can_ntp (timedatedTimedate1 *object);
void timedated_timedate1_set_can_ntp (timedatedTimedate1 *object, gboolean value);

gboolean timedated_timedate1_get_ntp (timedatedTimedate1 *object);
void timedated_timedate1_set_ntp (timedatedTimedate1 *object, gboolean value);

gboolean timedated_timedate1_get_ntpsynchronized (timedatedTimedate1 *object);
void timedated_timedate1_set_ntpsynchronized (timedatedTimedate1 *object, gboolean value);

guint64 timedated_timedate1_get_time_usec (timedatedTimedate1 *object);
void timedated_timedate1_set_time_usec (timedatedTimedate1 *object, guint64 value);

guint64 timedated_timedate1_get_rtctime_usec (timedatedTimedate1 *object);
void timedated_timedate1_set_rtctime_usec (timedatedTimedate1 *object, guint64 value);


/* ---- */

#define TIMEDATED_TYPE_TIMEDATE1_PROXY (timedated_timedate1_proxy_get_type ())
#define TIMEDATED_TIMEDATE1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TIMEDATED_TYPE_TIMEDATE1_PROXY, timedatedTimedate1Proxy))
#define TIMEDATED_TIMEDATE1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TIMEDATED_TYPE_TIMEDATE1_PROXY, timedatedTimedate1ProxyClass))
#define TIMEDATED_TIMEDATE1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TIMEDATED_TYPE_TIMEDATE1_PROXY, timedatedTimedate1ProxyClass))
#define TIMEDATED_IS_TIMEDATE1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TIMEDATED_TYPE_TIMEDATE1_PROXY))
#define TIMEDATED_IS_TIMEDATE1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TIMEDATED_TYPE_TIMEDATE1_PROXY))

typedef struct _timedatedTimedate1Proxy timedatedTimedate1Proxy;
typedef struct _timedatedTimedate1ProxyClass timedatedTimedate1ProxyClass;
typedef struct _timedatedTimedate1ProxyPrivate timedatedTimedate1ProxyPrivate;

struct _timedatedTimedate1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  timedatedTimedate1ProxyPrivate *priv;
};

struct _timedatedTimedate1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType timedated_timedate1_proxy_get_type (void) G_GNUC_CONST;

void timedated_timedate1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
timedatedTimedate1 *timedated_timedate1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
timedatedTimedate1 *timedated_timedate1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void timedated_timedate1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
timedatedTimedate1 *timedated_timedate1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
timedatedTimedate1 *timedated_timedate1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TIMEDATED_TYPE_TIMEDATE1_SKELETON (timedated_timedate1_skeleton_get_type ())
#define TIMEDATED_TIMEDATE1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TIMEDATED_TYPE_TIMEDATE1_SKELETON, timedatedTimedate1Skeleton))
#define TIMEDATED_TIMEDATE1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TIMEDATED_TYPE_TIMEDATE1_SKELETON, timedatedTimedate1SkeletonClass))
#define TIMEDATED_TIMEDATE1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TIMEDATED_TYPE_TIMEDATE1_SKELETON, timedatedTimedate1SkeletonClass))
#define TIMEDATED_IS_TIMEDATE1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TIMEDATED_TYPE_TIMEDATE1_SKELETON))
#define TIMEDATED_IS_TIMEDATE1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TIMEDATED_TYPE_TIMEDATE1_SKELETON))

typedef struct _timedatedTimedate1Skeleton timedatedTimedate1Skeleton;
typedef struct _timedatedTimedate1SkeletonClass timedatedTimedate1SkeletonClass;
typedef struct _timedatedTimedate1SkeletonPrivate timedatedTimedate1SkeletonPrivate;

struct _timedatedTimedate1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  timedatedTimedate1SkeletonPrivate *priv;
};

struct _timedatedTimedate1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType timedated_timedate1_skeleton_get_type (void) G_GNUC_CONST;

timedatedTimedate1 *timedated_timedate1_skeleton_new (void);


G_END_DECLS

#endif /* __SRC_INTERFACES_TIMEDATED_TIMEDATED_GEN_H__ */
