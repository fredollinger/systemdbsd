/*
 * Generated by gdbus-codegen 2.40.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __LOCALED_GEN_H__
#define __LOCALED_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.locale1 */

#define LOCALED_TYPE_ (localed__get_type ())
#define LOCALED_(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LOCALED_TYPE_, Localed))
#define LOCALED_IS_(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LOCALED_TYPE_))
#define LOCALED__GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), LOCALED_TYPE_, LocaledIface))

struct _Localed;
typedef struct _Localed Localed;
typedef struct _LocaledIface LocaledIface;

struct _LocaledIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_set_locale) (
    Localed *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_locale,
    gboolean arg_user_interaction);

  gboolean (*handle_set_vconsole_keyboard) (
    Localed *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_keymap,
    const gchar *arg_keymap_toggle,
    gboolean arg_convert,
    gboolean arg_user_interaction);

  gboolean (*handle_set_x11_keyboard) (
    Localed *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_layout,
    const gchar *arg_model,
    const gchar *arg_variant,
    const gchar *arg_options,
    gboolean arg_convert,
    gboolean arg_user_interaction);

  const gchar *const * (*get_locale) (Localed *object);

  const gchar * (*get_vconsole_keymap) (Localed *object);

  const gchar * (*get_vconsole_keymap_toggle) (Localed *object);

  const gchar * (*get_x11_layout) (Localed *object);

  const gchar * (*get_x11_model) (Localed *object);

  const gchar * (*get_x11_options) (Localed *object);

  const gchar * (*get_x11_variant) (Localed *object);

};

GType localed__get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *localed__interface_info (void);
guint localed__override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void localed__complete_set_locale (
    Localed *object,
    GDBusMethodInvocation *invocation);

void localed__complete_set_vconsole_keyboard (
    Localed *object,
    GDBusMethodInvocation *invocation);

void localed__complete_set_x11_keyboard (
    Localed *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void localed__call_set_locale (
    Localed *proxy,
    const gchar *const *arg_locale,
    gboolean arg_user_interaction,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean localed__call_set_locale_finish (
    Localed *proxy,
    GAsyncResult *res,
    GError **error);

gboolean localed__call_set_locale_sync (
    Localed *proxy,
    const gchar *const *arg_locale,
    gboolean arg_user_interaction,
    GCancellable *cancellable,
    GError **error);

void localed__call_set_vconsole_keyboard (
    Localed *proxy,
    const gchar *arg_keymap,
    const gchar *arg_keymap_toggle,
    gboolean arg_convert,
    gboolean arg_user_interaction,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean localed__call_set_vconsole_keyboard_finish (
    Localed *proxy,
    GAsyncResult *res,
    GError **error);

gboolean localed__call_set_vconsole_keyboard_sync (
    Localed *proxy,
    const gchar *arg_keymap,
    const gchar *arg_keymap_toggle,
    gboolean arg_convert,
    gboolean arg_user_interaction,
    GCancellable *cancellable,
    GError **error);

void localed__call_set_x11_keyboard (
    Localed *proxy,
    const gchar *arg_layout,
    const gchar *arg_model,
    const gchar *arg_variant,
    const gchar *arg_options,
    gboolean arg_convert,
    gboolean arg_user_interaction,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean localed__call_set_x11_keyboard_finish (
    Localed *proxy,
    GAsyncResult *res,
    GError **error);

gboolean localed__call_set_x11_keyboard_sync (
    Localed *proxy,
    const gchar *arg_layout,
    const gchar *arg_model,
    const gchar *arg_variant,
    const gchar *arg_options,
    gboolean arg_convert,
    gboolean arg_user_interaction,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *const *localed__get_locale (Localed *object);
gchar **localed__dup_locale (Localed *object);
void localed__set_locale (Localed *object, const gchar *const *value);

const gchar *localed__get_vconsole_keymap (Localed *object);
gchar *localed__dup_vconsole_keymap (Localed *object);
void localed__set_vconsole_keymap (Localed *object, const gchar *value);

const gchar *localed__get_vconsole_keymap_toggle (Localed *object);
gchar *localed__dup_vconsole_keymap_toggle (Localed *object);
void localed__set_vconsole_keymap_toggle (Localed *object, const gchar *value);

const gchar *localed__get_x11_layout (Localed *object);
gchar *localed__dup_x11_layout (Localed *object);
void localed__set_x11_layout (Localed *object, const gchar *value);

const gchar *localed__get_x11_model (Localed *object);
gchar *localed__dup_x11_model (Localed *object);
void localed__set_x11_model (Localed *object, const gchar *value);

const gchar *localed__get_x11_variant (Localed *object);
gchar *localed__dup_x11_variant (Localed *object);
void localed__set_x11_variant (Localed *object, const gchar *value);

const gchar *localed__get_x11_options (Localed *object);
gchar *localed__dup_x11_options (Localed *object);
void localed__set_x11_options (Localed *object, const gchar *value);


/* ---- */

#define LOCALED_TYPE__PROXY (localed__proxy_get_type ())
#define LOCALED__PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LOCALED_TYPE__PROXY, LocaledProxy))
#define LOCALED__PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), LOCALED_TYPE__PROXY, LocaledProxyClass))
#define LOCALED__PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), LOCALED_TYPE__PROXY, LocaledProxyClass))
#define LOCALED_IS__PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LOCALED_TYPE__PROXY))
#define LOCALED_IS__PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), LOCALED_TYPE__PROXY))

typedef struct _LocaledProxy LocaledProxy;
typedef struct _LocaledProxyClass LocaledProxyClass;
typedef struct _LocaledProxyPrivate LocaledProxyPrivate;

struct _LocaledProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  LocaledProxyPrivate *priv;
};

struct _LocaledProxyClass
{
  GDBusProxyClass parent_class;
};

GType localed__proxy_get_type (void) G_GNUC_CONST;

void localed__proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Localed *localed__proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Localed *localed__proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void localed__proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Localed *localed__proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Localed *localed__proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define LOCALED_TYPE__SKELETON (localed__skeleton_get_type ())
#define LOCALED__SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LOCALED_TYPE__SKELETON, LocaledSkeleton))
#define LOCALED__SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), LOCALED_TYPE__SKELETON, LocaledSkeletonClass))
#define LOCALED__SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), LOCALED_TYPE__SKELETON, LocaledSkeletonClass))
#define LOCALED_IS__SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LOCALED_TYPE__SKELETON))
#define LOCALED_IS__SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), LOCALED_TYPE__SKELETON))

typedef struct _LocaledSkeleton LocaledSkeleton;
typedef struct _LocaledSkeletonClass LocaledSkeletonClass;
typedef struct _LocaledSkeletonPrivate LocaledSkeletonPrivate;

struct _LocaledSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  LocaledSkeletonPrivate *priv;
};

struct _LocaledSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType localed__skeleton_get_type (void) G_GNUC_CONST;

Localed *localed__skeleton_new (void);


G_END_DECLS

#endif /* __LOCALED_GEN_H__ */
