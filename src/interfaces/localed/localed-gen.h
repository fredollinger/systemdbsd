/*
 * Generated by gdbus-codegen 2.40.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __LOCALED_GEN_H__
#define __LOCALED_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.locale1 */

#define TYPE_LOCALE1 (locale1_get_type ())
#define LOCALE1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_LOCALE1, Locale1))
#define IS_LOCALE1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_LOCALE1))
#define LOCALE1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_LOCALE1, Locale1Iface))

struct _Locale1;
typedef struct _Locale1 Locale1;
typedef struct _Locale1Iface Locale1Iface;

struct _Locale1Iface
{
  GTypeInterface parent_iface;


  gboolean (*handle_set_locale) (
    Locale1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *arg_unnamed_arg0,
    gboolean arg_unnamed_arg1);

  gboolean (*handle_set_vconsole_keyboard) (
    Locale1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    gboolean arg_unnamed_arg2,
    gboolean arg_unnamed_arg3);

  gboolean (*handle_set_x11_keyboard) (
    Locale1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    const gchar *arg_unnamed_arg2,
    const gchar *arg_unnamed_arg3,
    gboolean arg_unnamed_arg4,
    gboolean arg_unnamed_arg5);

  const gchar *const * (*get_locale) (Locale1 *object);

  const gchar * (*get_vconsole_keymap) (Locale1 *object);

  const gchar * (*get_vconsole_keymap_toggle) (Locale1 *object);

  const gchar * (*get_x11_layout) (Locale1 *object);

  const gchar * (*get_x11_model) (Locale1 *object);

  const gchar * (*get_x11_options) (Locale1 *object);

  const gchar * (*get_x11_variant) (Locale1 *object);

};

GType locale1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *locale1_interface_info (void);
guint locale1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void locale1_complete_set_locale (
    Locale1 *object,
    GDBusMethodInvocation *invocation);

void locale1_complete_set_vconsole_keyboard (
    Locale1 *object,
    GDBusMethodInvocation *invocation);

void locale1_complete_set_x11_keyboard (
    Locale1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void locale1_call_set_locale (
    Locale1 *proxy,
    const gchar *const *arg_unnamed_arg0,
    gboolean arg_unnamed_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean locale1_call_set_locale_finish (
    Locale1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean locale1_call_set_locale_sync (
    Locale1 *proxy,
    const gchar *const *arg_unnamed_arg0,
    gboolean arg_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void locale1_call_set_vconsole_keyboard (
    Locale1 *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    gboolean arg_unnamed_arg2,
    gboolean arg_unnamed_arg3,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean locale1_call_set_vconsole_keyboard_finish (
    Locale1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean locale1_call_set_vconsole_keyboard_sync (
    Locale1 *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    gboolean arg_unnamed_arg2,
    gboolean arg_unnamed_arg3,
    GCancellable *cancellable,
    GError **error);

void locale1_call_set_x11_keyboard (
    Locale1 *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    const gchar *arg_unnamed_arg2,
    const gchar *arg_unnamed_arg3,
    gboolean arg_unnamed_arg4,
    gboolean arg_unnamed_arg5,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean locale1_call_set_x11_keyboard_finish (
    Locale1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean locale1_call_set_x11_keyboard_sync (
    Locale1 *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    const gchar *arg_unnamed_arg2,
    const gchar *arg_unnamed_arg3,
    gboolean arg_unnamed_arg4,
    gboolean arg_unnamed_arg5,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *const *locale1_get_locale (Locale1 *object);
gchar **locale1_dup_locale (Locale1 *object);
void locale1_set_locale (Locale1 *object, const gchar *const *value);

const gchar *locale1_get_x11_layout (Locale1 *object);
gchar *locale1_dup_x11_layout (Locale1 *object);
void locale1_set_x11_layout (Locale1 *object, const gchar *value);

const gchar *locale1_get_x11_model (Locale1 *object);
gchar *locale1_dup_x11_model (Locale1 *object);
void locale1_set_x11_model (Locale1 *object, const gchar *value);

const gchar *locale1_get_x11_variant (Locale1 *object);
gchar *locale1_dup_x11_variant (Locale1 *object);
void locale1_set_x11_variant (Locale1 *object, const gchar *value);

const gchar *locale1_get_x11_options (Locale1 *object);
gchar *locale1_dup_x11_options (Locale1 *object);
void locale1_set_x11_options (Locale1 *object, const gchar *value);

const gchar *locale1_get_vconsole_keymap (Locale1 *object);
gchar *locale1_dup_vconsole_keymap (Locale1 *object);
void locale1_set_vconsole_keymap (Locale1 *object, const gchar *value);

const gchar *locale1_get_vconsole_keymap_toggle (Locale1 *object);
gchar *locale1_dup_vconsole_keymap_toggle (Locale1 *object);
void locale1_set_vconsole_keymap_toggle (Locale1 *object, const gchar *value);


/* ---- */

#define TYPE_LOCALE1_PROXY (locale1_proxy_get_type ())
#define LOCALE1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_LOCALE1_PROXY, Locale1Proxy))
#define LOCALE1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_LOCALE1_PROXY, Locale1ProxyClass))
#define LOCALE1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_LOCALE1_PROXY, Locale1ProxyClass))
#define IS_LOCALE1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_LOCALE1_PROXY))
#define IS_LOCALE1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_LOCALE1_PROXY))

typedef struct _Locale1Proxy Locale1Proxy;
typedef struct _Locale1ProxyClass Locale1ProxyClass;
typedef struct _Locale1ProxyPrivate Locale1ProxyPrivate;

struct _Locale1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  Locale1ProxyPrivate *priv;
};

struct _Locale1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType locale1_proxy_get_type (void) G_GNUC_CONST;

void locale1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Locale1 *locale1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Locale1 *locale1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void locale1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Locale1 *locale1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Locale1 *locale1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_LOCALE1_SKELETON (locale1_skeleton_get_type ())
#define LOCALE1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_LOCALE1_SKELETON, Locale1Skeleton))
#define LOCALE1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_LOCALE1_SKELETON, Locale1SkeletonClass))
#define LOCALE1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_LOCALE1_SKELETON, Locale1SkeletonClass))
#define IS_LOCALE1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_LOCALE1_SKELETON))
#define IS_LOCALE1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_LOCALE1_SKELETON))

typedef struct _Locale1Skeleton Locale1Skeleton;
typedef struct _Locale1SkeletonClass Locale1SkeletonClass;
typedef struct _Locale1SkeletonPrivate Locale1SkeletonPrivate;

struct _Locale1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  Locale1SkeletonPrivate *priv;
};

struct _Locale1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType locale1_skeleton_get_type (void) G_GNUC_CONST;

Locale1 *locale1_skeleton_new (void);


G_END_DECLS

#endif /* __LOCALED_GEN_H__ */
