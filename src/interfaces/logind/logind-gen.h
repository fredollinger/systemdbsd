/*
 * Generated by gdbus-codegen 2.40.0. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __LOGIND_GEN_H__
#define __LOGIND_GEN_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.login1.Manager */

#define LOGIND_TYPE_MANAGER (logind_manager_get_type ())
#define LOGIND_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LOGIND_TYPE_MANAGER, LogindManager))
#define LOGIND_IS_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LOGIND_TYPE_MANAGER))
#define LOGIND_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), LOGIND_TYPE_MANAGER, LogindManagerIface))

struct _LogindManager;
typedef struct _LogindManager LogindManager;
typedef struct _LogindManagerIface LogindManagerIface;

struct _LogindManagerIface
{
  GTypeInterface parent_iface;



  gboolean (*handle_activate_session) (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_activate_session_on_seat) (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

  gboolean (*handle_attach_device) (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    gboolean arg_unnamed_arg2);

  gboolean (*handle_can_hibernate) (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_hybrid_sleep) (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_power_off) (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_reboot) (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_can_suspend) (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_create_session) (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    guint arg_unnamed_arg0,
    guint arg_unnamed_arg1,
    const gchar *arg_unnamed_arg2,
    const gchar *arg_unnamed_arg3,
    const gchar *arg_unnamed_arg4,
    const gchar *arg_unnamed_arg5,
    const gchar *arg_unnamed_arg6,
    guint arg_unnamed_arg7,
    const gchar *arg_unnamed_arg8,
    const gchar *arg_unnamed_arg9,
    gboolean arg_unnamed_arg10,
    const gchar *arg_unnamed_arg11,
    const gchar *arg_unnamed_arg12,
    GVariant *arg_unnamed_arg13);

  gboolean (*handle_flush_devices) (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_unnamed_arg0);

  gboolean (*handle_get_seat) (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_get_session) (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_get_session_by_pid) (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    guint arg_unnamed_arg0);

  gboolean (*handle_get_user) (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    guint arg_unnamed_arg0);

  gboolean (*handle_get_user_by_pid) (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    guint arg_unnamed_arg0);

  gboolean (*handle_hibernate) (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_unnamed_arg0);

  gboolean (*handle_hybrid_sleep) (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_unnamed_arg0);

  gboolean (*handle_inhibit) (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    const gchar *arg_unnamed_arg2,
    const gchar *arg_unnamed_arg3);

  gboolean (*handle_kill_session) (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    gint arg_unnamed_arg2);

  gboolean (*handle_kill_user) (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    guint arg_unnamed_arg0,
    gint arg_unnamed_arg1);

  gboolean (*handle_list_inhibitors) (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_list_seats) (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_list_sessions) (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_list_users) (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_lock_session) (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_lock_sessions) (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_power_off) (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_unnamed_arg0);

  gboolean (*handle_reboot) (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_unnamed_arg0);

  gboolean (*handle_release_session) (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_set_user_linger) (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    guint arg_unnamed_arg0,
    gboolean arg_unnamed_arg1,
    gboolean arg_unnamed_arg2);

  gboolean (*handle_suspend) (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_unnamed_arg0);

  gboolean (*handle_terminate_seat) (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_terminate_session) (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_terminate_user) (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    guint arg_unnamed_arg0);

  gboolean (*handle_unlock_session) (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0);

  gboolean (*handle_unlock_sessions) (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

  const gchar * (*get_block_inhibited) (LogindManager *object);

  const gchar * (*get_delay_inhibited) (LogindManager *object);

  const gchar * (*get_handle_hibernate_key) (LogindManager *object);

  const gchar * (*get_handle_lid_switch) (LogindManager *object);

  const gchar * (*get_handle_power_key) (LogindManager *object);

  const gchar * (*get_handle_suspend_key) (LogindManager *object);

  const gchar * (*get_idle_action) (LogindManager *object);

  guint64  (*get_idle_action_usec) (LogindManager *object);

  gboolean  (*get_idle_hint) (LogindManager *object);

  guint64  (*get_idle_since_hint) (LogindManager *object);

  guint64  (*get_idle_since_hint_monotonic) (LogindManager *object);

  guint64  (*get_inhibit_delay_max_usec) (LogindManager *object);

  const gchar *const * (*get_kill_exclude_users) (LogindManager *object);

  const gchar *const * (*get_kill_only_users) (LogindManager *object);

  gboolean  (*get_kill_user_processes) (LogindManager *object);

  guint  (*get_nauto_vts) (LogindManager *object);

  gboolean  (*get_preparing_for_shutdown) (LogindManager *object);

  gboolean  (*get_preparing_for_sleep) (LogindManager *object);

  void (*prepare_for_shutdown) (
    LogindManager *object,
    gboolean arg_unnamed_arg0);

  void (*prepare_for_sleep) (
    LogindManager *object,
    gboolean arg_unnamed_arg0);

  void (*seat_new) (
    LogindManager *object,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

  void (*seat_removed) (
    LogindManager *object,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

  void (*session_new) (
    LogindManager *object,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

  void (*session_removed) (
    LogindManager *object,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

  void (*user_new) (
    LogindManager *object,
    guint arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

  void (*user_removed) (
    LogindManager *object,
    guint arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

};

GType logind_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *logind_manager_interface_info (void);
guint logind_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void logind_manager_complete_get_session (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg1);

void logind_manager_complete_get_session_by_pid (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg1);

void logind_manager_complete_get_user (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg1);

void logind_manager_complete_get_user_by_pid (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg1);

void logind_manager_complete_get_seat (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg1);

void logind_manager_complete_list_sessions (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void logind_manager_complete_list_users (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void logind_manager_complete_list_seats (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void logind_manager_complete_list_inhibitors (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void logind_manager_complete_create_session (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg14,
    const gchar *unnamed_arg15,
    const gchar *unnamed_arg16,
    GVariant *unnamed_arg17,
    guint unnamed_arg18,
    const gchar *unnamed_arg19,
    guint unnamed_arg20,
    gboolean unnamed_arg21);

void logind_manager_complete_release_session (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

void logind_manager_complete_activate_session (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

void logind_manager_complete_activate_session_on_seat (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

void logind_manager_complete_lock_session (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

void logind_manager_complete_unlock_session (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

void logind_manager_complete_lock_sessions (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

void logind_manager_complete_unlock_sessions (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

void logind_manager_complete_kill_session (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

void logind_manager_complete_kill_user (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

void logind_manager_complete_terminate_session (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

void logind_manager_complete_terminate_user (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

void logind_manager_complete_terminate_seat (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

void logind_manager_complete_set_user_linger (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

void logind_manager_complete_attach_device (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

void logind_manager_complete_flush_devices (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

void logind_manager_complete_power_off (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

void logind_manager_complete_reboot (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

void logind_manager_complete_suspend (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

void logind_manager_complete_hibernate (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

void logind_manager_complete_hybrid_sleep (
    LogindManager *object,
    GDBusMethodInvocation *invocation);

void logind_manager_complete_can_power_off (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg0);

void logind_manager_complete_can_reboot (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg0);

void logind_manager_complete_can_suspend (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg0);

void logind_manager_complete_can_hibernate (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg0);

void logind_manager_complete_can_hybrid_sleep (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg0);

void logind_manager_complete_inhibit (
    LogindManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg4);



/* D-Bus signal emissions functions: */
void logind_manager_emit_session_new (
    LogindManager *object,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

void logind_manager_emit_session_removed (
    LogindManager *object,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

void logind_manager_emit_user_new (
    LogindManager *object,
    guint arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

void logind_manager_emit_user_removed (
    LogindManager *object,
    guint arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

void logind_manager_emit_seat_new (
    LogindManager *object,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

void logind_manager_emit_seat_removed (
    LogindManager *object,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1);

void logind_manager_emit_prepare_for_shutdown (
    LogindManager *object,
    gboolean arg_unnamed_arg0);

void logind_manager_emit_prepare_for_sleep (
    LogindManager *object,
    gboolean arg_unnamed_arg0);



/* D-Bus method calls: */
void logind_manager_call_get_session (
    LogindManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_get_session_finish (
    LogindManager *proxy,
    gchar **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_get_session_sync (
    LogindManager *proxy,
    const gchar *arg_unnamed_arg0,
    gchar **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_get_session_by_pid (
    LogindManager *proxy,
    guint arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_get_session_by_pid_finish (
    LogindManager *proxy,
    gchar **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_get_session_by_pid_sync (
    LogindManager *proxy,
    guint arg_unnamed_arg0,
    gchar **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_get_user (
    LogindManager *proxy,
    guint arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_get_user_finish (
    LogindManager *proxy,
    gchar **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_get_user_sync (
    LogindManager *proxy,
    guint arg_unnamed_arg0,
    gchar **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_get_user_by_pid (
    LogindManager *proxy,
    guint arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_get_user_by_pid_finish (
    LogindManager *proxy,
    gchar **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_get_user_by_pid_sync (
    LogindManager *proxy,
    guint arg_unnamed_arg0,
    gchar **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_get_seat (
    LogindManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_get_seat_finish (
    LogindManager *proxy,
    gchar **out_unnamed_arg1,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_get_seat_sync (
    LogindManager *proxy,
    const gchar *arg_unnamed_arg0,
    gchar **out_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_list_sessions (
    LogindManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_list_sessions_finish (
    LogindManager *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_list_sessions_sync (
    LogindManager *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_list_users (
    LogindManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_list_users_finish (
    LogindManager *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_list_users_sync (
    LogindManager *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_list_seats (
    LogindManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_list_seats_finish (
    LogindManager *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_list_seats_sync (
    LogindManager *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_list_inhibitors (
    LogindManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_list_inhibitors_finish (
    LogindManager *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_list_inhibitors_sync (
    LogindManager *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_create_session (
    LogindManager *proxy,
    guint arg_unnamed_arg0,
    guint arg_unnamed_arg1,
    const gchar *arg_unnamed_arg2,
    const gchar *arg_unnamed_arg3,
    const gchar *arg_unnamed_arg4,
    const gchar *arg_unnamed_arg5,
    const gchar *arg_unnamed_arg6,
    guint arg_unnamed_arg7,
    const gchar *arg_unnamed_arg8,
    const gchar *arg_unnamed_arg9,
    gboolean arg_unnamed_arg10,
    const gchar *arg_unnamed_arg11,
    const gchar *arg_unnamed_arg12,
    GVariant *arg_unnamed_arg13,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_create_session_finish (
    LogindManager *proxy,
    gchar **out_unnamed_arg14,
    gchar **out_unnamed_arg15,
    gchar **out_unnamed_arg16,
    GVariant **out_unnamed_arg17,
    guint *out_unnamed_arg18,
    gchar **out_unnamed_arg19,
    guint *out_unnamed_arg20,
    gboolean *out_unnamed_arg21,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_create_session_sync (
    LogindManager *proxy,
    guint arg_unnamed_arg0,
    guint arg_unnamed_arg1,
    const gchar *arg_unnamed_arg2,
    const gchar *arg_unnamed_arg3,
    const gchar *arg_unnamed_arg4,
    const gchar *arg_unnamed_arg5,
    const gchar *arg_unnamed_arg6,
    guint arg_unnamed_arg7,
    const gchar *arg_unnamed_arg8,
    const gchar *arg_unnamed_arg9,
    gboolean arg_unnamed_arg10,
    const gchar *arg_unnamed_arg11,
    const gchar *arg_unnamed_arg12,
    GVariant *arg_unnamed_arg13,
    gchar **out_unnamed_arg14,
    gchar **out_unnamed_arg15,
    gchar **out_unnamed_arg16,
    GVariant **out_unnamed_arg17,
    guint *out_unnamed_arg18,
    gchar **out_unnamed_arg19,
    guint *out_unnamed_arg20,
    gboolean *out_unnamed_arg21,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_release_session (
    LogindManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_release_session_finish (
    LogindManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_release_session_sync (
    LogindManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_activate_session (
    LogindManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_activate_session_finish (
    LogindManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_activate_session_sync (
    LogindManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_activate_session_on_seat (
    LogindManager *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_activate_session_on_seat_finish (
    LogindManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_activate_session_on_seat_sync (
    LogindManager *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_lock_session (
    LogindManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_lock_session_finish (
    LogindManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_lock_session_sync (
    LogindManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_unlock_session (
    LogindManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_unlock_session_finish (
    LogindManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_unlock_session_sync (
    LogindManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_lock_sessions (
    LogindManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_lock_sessions_finish (
    LogindManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_lock_sessions_sync (
    LogindManager *proxy,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_unlock_sessions (
    LogindManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_unlock_sessions_finish (
    LogindManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_unlock_sessions_sync (
    LogindManager *proxy,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_kill_session (
    LogindManager *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    gint arg_unnamed_arg2,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_kill_session_finish (
    LogindManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_kill_session_sync (
    LogindManager *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    gint arg_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_kill_user (
    LogindManager *proxy,
    guint arg_unnamed_arg0,
    gint arg_unnamed_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_kill_user_finish (
    LogindManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_kill_user_sync (
    LogindManager *proxy,
    guint arg_unnamed_arg0,
    gint arg_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_terminate_session (
    LogindManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_terminate_session_finish (
    LogindManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_terminate_session_sync (
    LogindManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_terminate_user (
    LogindManager *proxy,
    guint arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_terminate_user_finish (
    LogindManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_terminate_user_sync (
    LogindManager *proxy,
    guint arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_terminate_seat (
    LogindManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_terminate_seat_finish (
    LogindManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_terminate_seat_sync (
    LogindManager *proxy,
    const gchar *arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_set_user_linger (
    LogindManager *proxy,
    guint arg_unnamed_arg0,
    gboolean arg_unnamed_arg1,
    gboolean arg_unnamed_arg2,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_set_user_linger_finish (
    LogindManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_set_user_linger_sync (
    LogindManager *proxy,
    guint arg_unnamed_arg0,
    gboolean arg_unnamed_arg1,
    gboolean arg_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_attach_device (
    LogindManager *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    gboolean arg_unnamed_arg2,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_attach_device_finish (
    LogindManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_attach_device_sync (
    LogindManager *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    gboolean arg_unnamed_arg2,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_flush_devices (
    LogindManager *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_flush_devices_finish (
    LogindManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_flush_devices_sync (
    LogindManager *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_power_off (
    LogindManager *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_power_off_finish (
    LogindManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_power_off_sync (
    LogindManager *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_reboot (
    LogindManager *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_reboot_finish (
    LogindManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_reboot_sync (
    LogindManager *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_suspend (
    LogindManager *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_suspend_finish (
    LogindManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_suspend_sync (
    LogindManager *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_hibernate (
    LogindManager *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_hibernate_finish (
    LogindManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_hibernate_sync (
    LogindManager *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_hybrid_sleep (
    LogindManager *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_hybrid_sleep_finish (
    LogindManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_hybrid_sleep_sync (
    LogindManager *proxy,
    gboolean arg_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_can_power_off (
    LogindManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_can_power_off_finish (
    LogindManager *proxy,
    gchar **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_can_power_off_sync (
    LogindManager *proxy,
    gchar **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_can_reboot (
    LogindManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_can_reboot_finish (
    LogindManager *proxy,
    gchar **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_can_reboot_sync (
    LogindManager *proxy,
    gchar **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_can_suspend (
    LogindManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_can_suspend_finish (
    LogindManager *proxy,
    gchar **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_can_suspend_sync (
    LogindManager *proxy,
    gchar **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_can_hibernate (
    LogindManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_can_hibernate_finish (
    LogindManager *proxy,
    gchar **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_can_hibernate_sync (
    LogindManager *proxy,
    gchar **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_can_hybrid_sleep (
    LogindManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_can_hybrid_sleep_finish (
    LogindManager *proxy,
    gchar **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_can_hybrid_sleep_sync (
    LogindManager *proxy,
    gchar **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void logind_manager_call_inhibit (
    LogindManager *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    const gchar *arg_unnamed_arg2,
    const gchar *arg_unnamed_arg3,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean logind_manager_call_inhibit_finish (
    LogindManager *proxy,
    GVariant **out_unnamed_arg4,
    GAsyncResult *res,
    GError **error);

gboolean logind_manager_call_inhibit_sync (
    LogindManager *proxy,
    const gchar *arg_unnamed_arg0,
    const gchar *arg_unnamed_arg1,
    const gchar *arg_unnamed_arg2,
    const gchar *arg_unnamed_arg3,
    GVariant **out_unnamed_arg4,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
guint logind_manager_get_nauto_vts (LogindManager *object);
void logind_manager_set_nauto_vts (LogindManager *object, guint value);

const gchar *const *logind_manager_get_kill_only_users (LogindManager *object);
gchar **logind_manager_dup_kill_only_users (LogindManager *object);
void logind_manager_set_kill_only_users (LogindManager *object, const gchar *const *value);

const gchar *const *logind_manager_get_kill_exclude_users (LogindManager *object);
gchar **logind_manager_dup_kill_exclude_users (LogindManager *object);
void logind_manager_set_kill_exclude_users (LogindManager *object, const gchar *const *value);

gboolean logind_manager_get_kill_user_processes (LogindManager *object);
void logind_manager_set_kill_user_processes (LogindManager *object, gboolean value);

gboolean logind_manager_get_idle_hint (LogindManager *object);
void logind_manager_set_idle_hint (LogindManager *object, gboolean value);

guint64 logind_manager_get_idle_since_hint (LogindManager *object);
void logind_manager_set_idle_since_hint (LogindManager *object, guint64 value);

guint64 logind_manager_get_idle_since_hint_monotonic (LogindManager *object);
void logind_manager_set_idle_since_hint_monotonic (LogindManager *object, guint64 value);

const gchar *logind_manager_get_block_inhibited (LogindManager *object);
gchar *logind_manager_dup_block_inhibited (LogindManager *object);
void logind_manager_set_block_inhibited (LogindManager *object, const gchar *value);

const gchar *logind_manager_get_delay_inhibited (LogindManager *object);
gchar *logind_manager_dup_delay_inhibited (LogindManager *object);
void logind_manager_set_delay_inhibited (LogindManager *object, const gchar *value);

guint64 logind_manager_get_inhibit_delay_max_usec (LogindManager *object);
void logind_manager_set_inhibit_delay_max_usec (LogindManager *object, guint64 value);

const gchar *logind_manager_get_handle_power_key (LogindManager *object);
gchar *logind_manager_dup_handle_power_key (LogindManager *object);
void logind_manager_set_handle_power_key (LogindManager *object, const gchar *value);

const gchar *logind_manager_get_handle_suspend_key (LogindManager *object);
gchar *logind_manager_dup_handle_suspend_key (LogindManager *object);
void logind_manager_set_handle_suspend_key (LogindManager *object, const gchar *value);

const gchar *logind_manager_get_handle_hibernate_key (LogindManager *object);
gchar *logind_manager_dup_handle_hibernate_key (LogindManager *object);
void logind_manager_set_handle_hibernate_key (LogindManager *object, const gchar *value);

const gchar *logind_manager_get_handle_lid_switch (LogindManager *object);
gchar *logind_manager_dup_handle_lid_switch (LogindManager *object);
void logind_manager_set_handle_lid_switch (LogindManager *object, const gchar *value);

const gchar *logind_manager_get_idle_action (LogindManager *object);
gchar *logind_manager_dup_idle_action (LogindManager *object);
void logind_manager_set_idle_action (LogindManager *object, const gchar *value);

guint64 logind_manager_get_idle_action_usec (LogindManager *object);
void logind_manager_set_idle_action_usec (LogindManager *object, guint64 value);

gboolean logind_manager_get_preparing_for_shutdown (LogindManager *object);
void logind_manager_set_preparing_for_shutdown (LogindManager *object, gboolean value);

gboolean logind_manager_get_preparing_for_sleep (LogindManager *object);
void logind_manager_set_preparing_for_sleep (LogindManager *object, gboolean value);


/* ---- */

#define LOGIND_TYPE_MANAGER_PROXY (logind_manager_proxy_get_type ())
#define LOGIND_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LOGIND_TYPE_MANAGER_PROXY, LogindManagerProxy))
#define LOGIND_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), LOGIND_TYPE_MANAGER_PROXY, LogindManagerProxyClass))
#define LOGIND_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), LOGIND_TYPE_MANAGER_PROXY, LogindManagerProxyClass))
#define LOGIND_IS_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LOGIND_TYPE_MANAGER_PROXY))
#define LOGIND_IS_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), LOGIND_TYPE_MANAGER_PROXY))

typedef struct _LogindManagerProxy LogindManagerProxy;
typedef struct _LogindManagerProxyClass LogindManagerProxyClass;
typedef struct _LogindManagerProxyPrivate LogindManagerProxyPrivate;

struct _LogindManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  LogindManagerProxyPrivate *priv;
};

struct _LogindManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType logind_manager_proxy_get_type (void) G_GNUC_CONST;

void logind_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
LogindManager *logind_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
LogindManager *logind_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void logind_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
LogindManager *logind_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
LogindManager *logind_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define LOGIND_TYPE_MANAGER_SKELETON (logind_manager_skeleton_get_type ())
#define LOGIND_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), LOGIND_TYPE_MANAGER_SKELETON, LogindManagerSkeleton))
#define LOGIND_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), LOGIND_TYPE_MANAGER_SKELETON, LogindManagerSkeletonClass))
#define LOGIND_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), LOGIND_TYPE_MANAGER_SKELETON, LogindManagerSkeletonClass))
#define LOGIND_IS_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), LOGIND_TYPE_MANAGER_SKELETON))
#define LOGIND_IS_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), LOGIND_TYPE_MANAGER_SKELETON))

typedef struct _LogindManagerSkeleton LogindManagerSkeleton;
typedef struct _LogindManagerSkeletonClass LogindManagerSkeletonClass;
typedef struct _LogindManagerSkeletonPrivate LogindManagerSkeletonPrivate;

struct _LogindManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  LogindManagerSkeletonPrivate *priv;
};

struct _LogindManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType logind_manager_skeleton_get_type (void) G_GNUC_CONST;

LogindManager *logind_manager_skeleton_new (void);


G_END_DECLS

#endif /* __LOGIND_GEN_H__ */
